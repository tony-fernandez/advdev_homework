// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
    
 node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Checkout Source Code
    stage('Checkout Source') {
      git url: 'https://github.com/tony-fernandez/advdev_homework.git'
    }

	    // Define Maven Command. Make sure it points to the correct settings for our Nexus installation 
	    // The file nexus_settings.xml needs to be in the Source Code repository.
	    def mvnCmd = "mvn -s ../nexus_settings.xml"
	    echo "mvnCmd: ${mvnCmd}"
	
	dir('Nationalparks') {
	  	// The following variables need to be defined at the top level
	    // and not inside the scope of a stage - otherwise they would not be accessible from other stages.
	    // Extract version and other properties from the pom.xml
	    def groupId    = getGroupIdFromPom("pom.xml")
	    def artifactId = getArtifactIdFromPom("pom.xml")
	    def version    = getVersionFromPom("pom.xml")
	
	    // Set the tag for the development image: version + build number
	    def devTag  = "${version}-${BUILD_NUMBER}"
	    echo "devTag: ${devTag}"
	    // Set the tag for the production image: version
	    def prodTag = "${version}"
	    echo "prodTag: ${prodTag}"
	
	    // Using Maven build the war file
	    // Do not run tests in this step
	    stage('Build war') {
	    	echo "Building version ${devTag}"
	
	    	sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
	    }
	
	    // Using Maven run the unit tests
	    stage('Unit Tests') {
	    	echo "Running Unit Tests"
	      
	      	sh "${mvnCmd} test"
	    }
	
	    // Using Maven call SonarQube for Code Analysis
	    stage('Code Analysis') {
	    	echo "Running Code Analysis"
	      
	      	sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
	    }
	
	    // Publish the built war file to Nexus
	    stage('Publish to Nexus') {
	    	echo "Publish to Nexus"
	      
	    	sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
	    }
	
	    // Build the OpenShift Image in OpenShift and tag it.
	    stage('Build and Tag OpenShift Image') {
	    	echo "Building OpenShift container image -parks:${devTag}"
	
	    	// Start Binary Build in OpenShift using the file we just published
	    	// The filename is in the 'target' directory of your current Jenkins workspace
	    	//sh "oc start-build nationalparks --follow --from-file=./target/nationalparks.jar -n ${GUID}-parks-dev"
	
	  		// OR use the file you just published into Nexus:
	  		
	  		//def host = sh "oc get route nexus3 --template='{{ .spec.host }}' -n ${GUID}-nexus"
	  		//echo "Nexus host:${host}"
	  		
	  		//def fileUrl = "http://${host}/repository/releases/com/openshift/evg/roadshow/nationalparks/${version}/nationalparks-${version}.jar"
    		//echo "File URL:${fileUrl}"
    		
    		//sh "oc start-build nationalparks --follow --from-file=${fileUrl}"
	
	     	// Tag the image using the devTag
       		sh "oc start-build nationalparks --follow=true --from-file=http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/com/openshift/evg/roadshow/nationalparks/${version}/nationalparks-${version}.jar -n ${GUID}-parks-dev"
        	openshiftVerifyBuild bldCfg: 'nationalparks', checkForTriggeredDeployments: 'false', namespace: '${GUID}-parks-dev', verbose: 'false'
	    	openshiftTag alias: 'false', destStream: 'nationalparks', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'nationalparks', srcTag: 'latest', verbose: 'false'
	    }
	
	    // Deploy the built image to the Development Environment.
	    stage('Deploy to Dev') {
	    	echo "Deploying container image to Development Project"
	        sh "oc set image dc/nationalparks nationalparks=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:${devTag} -n ${GUID}-parks-dev"
	        openshiftDeploy depCfg: 'nationalparks', namespace: '${GUID}-parks-dev', verbose: 'false'
	        openshiftVerifyDeployment depCfg: 'nationalparks', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true'
	        openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'nationalparks', verbose: 'false'
	    }
	
	    // Run Integration Tests in the Development Environment.
	    stage('Integration Tests') {
	    	sleep 20
	      	echo "Running Integration Tests"
	
	      	echo "Health check nationalparks"
	        sh "curl -i  http://nationalparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/healthz/"
	
	      	echo "ls ws info"
	        sh "curl -i -H 'Content-Length: 0' -X GET http://nationalparks-${GUID}-parks-dev.apps.${CLUSTER}/ws/info/"
	    }
	
	    // Copy Image to Nexus Docker Registry
	    stage('Copy Image to Nexus Docker Registry') {
	    	echo "Copy image to Nexus Docker Registry"
	
	    	sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/nationalparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/nationalparks:${devTag}"
	
	    	// Tag the built image with the production tag
	    	openshiftTag alias: 'false', destStream: 'nationalparks', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'nationalparks', srcTag: devTag, verbose: 'false'
	    }
	
	    // Blue/Green Deployment into Production
	    // -------------------------------------
	    // Do not activate the new version yet.
	    def destApp   = "nationalparks-green"
	    def activeApp = ""
	
	    stage('Blue/Green Production Deployment') {
	
	    	activeApp = sh(returnStdout: true, script: "oc get route nationalparks -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
	      	
	      	if (activeApp == "nationalparks-green") {
	        	destApp = "nationalparks-blue"
	      	}
	      
	      	echo "Active Application:      " + activeApp
	      	echo "Destination Application: " + destApp
	
	      	// Update the Image on the Production Deployment Config
	      	sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:${prodTag} -n ${GUID}-parks-prod"
	
	      	// Deploy the inactive application.
	      	openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
	      	openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
	      	openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
	    }
	
	    stage('Switch over to new Version') {
	    	//input "Switch Production?"
	      	echo "Switching Production application to ${destApp}."
	      	sh 'oc patch route nationalparks -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
	    }	
	}

  }    
}



// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
